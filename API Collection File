const express = require('express');
const connection = require('./config');
const makeModel = require('./Schema');
const myServer = express();
const mongoose = require('mongoose')
const createUser = require('./UserSchema')
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const secretKey = 'secretkey'
//creating API
myServer.use(express.json());


//UserCreation API
myServer.post('/createAccount',async (request,response)=>{
   try{
    const {username,email,password} = request.body;
   const registeredUser = await createUser.findOne({email:email})
   if(registeredUser){
    return response.send('User already exists')
   }
   const saltrounds = 10
   const encryptedPassword = await bcrypt.hash(password,saltrounds)
   const userCreateMessage = await createUser.create({
    userName:username,
    email:email,
    password:encryptedPassword
   })
   response.json(userCreateMessage)
   }
   catch(err){
    response.json({message:err})
   }
})


//userLogin API
myServer.post('/loginUser',async(request,response)=>{
    try{
        const {userId,password} = request.body;
    const OldUser = await createUser.findOne({email:userId});
    console.log(OldUser)
    if(!OldUser){
        return response.json({noUser:'User does not exist'})
    }
    if(bcrypt.compare(password,OldUser.password)){
        const token = jwt.sign({usermail:userId},secretKey);
        response.json({tokenData:token})
    }
    }
    catch(err){
        console.log(err)
    }
})
//get API for retrieveing all the documents
myServer.get('/getTasks',async (request,response)=>{
    const collectTasks = await makeModel.find({});
    response.status(200).json(collectTasks)
})


//Post API to post the Task Data and store in the DataBase
//single document posting
myServer.post('/postTask',async (request,response)=>{
    const modelClass = new makeModel({
        task: request.body.inputTask,
        taskCompleted:false
    })
    const postedTask = await modelClass.save();
    response.status(201).json(postedTask)
})


//Put API for updating the data in the database
myServer.put('/updateTasks',async (request,response)=>{
    const updatedTask = await makeModel.updateOne({_id:new mongoose.Types.ObjectId(request.body.updateTaskId)},{$set:{task:request.body.replaceTask}});
    response.json(updatedTask)
})

// //Delete API to delete data from the database
myServer.delete('/deleteTask',async (request,response)=>{
    const deletedTask = await makeModel.deleteOne({_id:new mongoose.Types.ObjectId(request.body.deleteTaskId)})
    response.json(deletedTask)
})


myServer.listen(3000,()=>console.log('server has started at 3000 port'))
